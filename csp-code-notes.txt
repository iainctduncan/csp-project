Notes on my csp code

csp-1
- job is to play a simple triad, choosing random realizations



LATER:
- assign constraints to their variables, for now can just run all of them naively

Representation notes
- we will need scales, which could be relative to the tonic key based on the chord function
- scale of IV M : p
  Maj#4: 1 M2 M3 A4 P5 M6 M7

functions we need
note-sym->note-num  C0 - 0, C5 - 60, etc

pre-assigned variables:
  tonic: C  
  tonality: Maj 
  root: II  
  quality: min7
to assign:
notes 0 to 4 (lets call them numbers 0 to 3

How do we check if a note is in a chord properly?
- we need to ref the pitch against the pitches in a chord
- given a chord symbol and it's root, what are the pitches?
- so need function/hash, 
  (pitches-in-chord chord-sym root)
- but we also need enharmonic testing to pass
- when we test a domain value, we aren't worried about enharms,
  it's like a midi note and we can present it properly after the fact
- prob good to add a comparator, (en-eq?) 
- make a hash of enharmonic equivalents that can be looped through

- easy solution would to get midi note numbers for each and compare that mod 12

- so for (chord-third? note root chord)  




